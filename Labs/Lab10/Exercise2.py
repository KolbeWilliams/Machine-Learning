# -*- coding: utf-8 -*-
"""Lab10_Exercise2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12cn0lP8gxaJBFt-uTTcpCIf08wUNqLDB
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

seeds = open('seeds_dataset.txt', 'r')
temp_file = open('temp_file.txt', 'w')
with seeds, temp_file:
    for line in seeds:
        area, perimeter, compactness, length_of_kernel, width_of_kernel, asymmetry_coefficient, length_of_kernel_groove, target = line.split()
        new_record = ','.join([area, perimeter, compactness, length_of_kernel, width_of_kernel, asymmetry_coefficient, length_of_kernel_groove, target])
        temp_file.write(new_record + '\n')
df = pd.read_csv('temp_file.txt', header=None)
x = np.array(df.iloc[:, :-1])
y = np.array(df.iloc[:, -1])

scaler = StandardScaler().fit(x)
x_scaled = scaler.transform(x)

y_2d = y.reshape(-1, 1)
encoder = OneHotEncoder(sparse_output=False)
y_encoded = encoder.fit_transform(y_2d)

x_train, x_test, y_train, y_test = train_test_split(x_scaled, y_encoded, test_size=0.2, random_state=42)

accuracy_arr = []

model1 = MLPClassifier(
  hidden_layer_sizes = (1000, 100, 300),
  activation = 'relu',
  solver = 'adam',
  max_iter = 20,
  batch_size = 16,
  alpha = 0.0001,
  random_state = 42,
  verbose = True,
  early_stopping = False)
model1.fit(x_train, y_train)

pred1 = model1.predict(x_test)
accuracy1 = accuracy_score(y_test, pred1)
print(f'Accuracy for model 1: {accuracy1}\n')
accuracy_arr.append(accuracy1)

model2 = MLPClassifier(
  hidden_layer_sizes = (8, 64, 64, 64),
  activation = 'logistic',
  solver = 'adam',
  max_iter = 20,
  batch_size = 8,
  alpha = 0.0001,
  random_state = 42,
  verbose = True,
  early_stopping = False)
model2.fit(x_train, y_train)

pred2 = model2.predict(x_test)
accuracy2 = accuracy_score(y_test, pred2)
print(f'Accuracy for model 2: {accuracy2}\n')
accuracy_arr.append(accuracy2)

model3 = MLPClassifier(
  hidden_layer_sizes = (128, 64, 32, 16),
  activation = 'tanh',
  solver = 'adam',
  max_iter = 500,
  batch_size =32,
  alpha = 0.0001,
  random_state = 42,
  verbose = True,
  early_stopping = False)
model3.fit(x_train, y_train)

pred3 = model3.predict(x_test)
accuracy3 = accuracy_score(y_test, pred3)
print(f'Accuracy for model 3: {accuracy3}\n')
accuracy_arr.append(accuracy3)

best_index = accuracy_arr.index(max(accuracy_arr))
print(f'The best model based off of accuracy score is: model {best_index + 1} with an accuracy score of {accuracy_arr[best_index]}')