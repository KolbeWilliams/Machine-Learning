# -*- coding: utf-8 -*-
"""Lab10_Exercise1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h5EcShT2cZVTJjPFWvnGboZS0hoGY9vE
"""

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score

diabetes = load_diabetes()
x, y = diabetes.data, diabetes.target
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

mse_arr = []
r2_score_arr = []

model1 = MLPRegressor(
  hidden_layer_sizes = (1000, 500, 300),
  activation = 'relu',
  solver = 'adam',
  max_iter = 20,
  batch_size = 16,
  alpha = 0.0001,
  random_state = 42,
  verbose = True,
  early_stopping = False)
model1.fit(x_train, y_train)

pred1 = model1.predict(x_test)
mse1 = mean_squared_error(y_test, pred1)
r2_1 = r2_score(y_test, pred1)
print(f'MSE for model 1: {mse1}')
print(f'R2 score for model 1: {r2_1}\n')
mse_arr.append(mse1)
r2_score_arr.append(r2_1)

model2 = MLPRegressor(
  hidden_layer_sizes = (8, 64, 64, 64),
  activation = 'relu',
  solver = 'adam',
  max_iter = 20,
  batch_size = 8,
  alpha = 0.0001,
  random_state = 42,
  verbose = True,
  early_stopping = False)
model2.fit(x_train, y_train)

pred2 = model2.predict(x_test)
mse2 = mean_squared_error(y_test, pred2)
r2_2 = r2_score(y_test, pred2)
print(f'MSE for model 2: {mse2}')
print(f'R2 score for model 2: {r2_2}\n')
mse_arr.append(mse2)
r2_score_arr.append(r2_2)

model3 = MLPRegressor(
  hidden_layer_sizes = (500, 100, 100, 100),
  activation = 'relu',
  solver = 'adam',
  max_iter = 100,
  batch_size =32,
  alpha = 0.0001,
  random_state = 42,
  verbose = True,
  early_stopping = False)
model3.fit(x_train, y_train)

pred3 = model3.predict(x_test)
mse3 = mean_squared_error(y_test, pred3)
r2_3 = r2_score(y_test, pred3)
print(f'MSE for model 3: {mse3}')
print(f'R2 score for model 3: {r2_3}\n')
mse_arr.append(mse3)
r2_score_arr.append(r2_3)

best_index = r2_score_arr.index(max(r2_score_arr))
print(f'The best model based off of R2 score is: model {best_index + 1}')
print(f'The MSE for model {best_index + 1} is : {mse_arr[best_index]}')